结构化可以规范页面，使开发者编写页面时更便捷更规范

<header>	显示网站名称、主题或者主要信息（介绍性或导航性的内容）
          只在必要时使用header，大多数情况下如果使用h1～h6能满足需求，就没有必要用header将它包起来。
          header与h1～h6元素中的标题是不能互换的。
<nav>	网站链接菜单，可以指向页面中的内容，应该仅对文档中重要的链接群使用nav。
      判断是否对一组链接使用nav，取决于内容的组织情况，应该将网站全局导航（让用户可以跳至网站各个主要部分的导航）标记为nav。
      可以选择将nav写进header里
<main> 一个页面只有一个部分代表其主要内容。
       不能将main放置在article、aside、footer、header或nav元素中。
<article>	用于定义主内容区，article定义了一段独立的内容，表示文档、页面、应用或网站中一个独立的容器。
          像聚合内容中的各部分，独立的内容项。
          一个article可以包含多个section元素，一个页面可以有多个article，article也可以包含article。
<section>	用于章节或段落。
          代表文档或应用的一个一般的区块（相似主题的一组内容，通常包含一个标题）。
          如果只是出于添加样式应该使用div而不是section。
          可以将section嵌套在article里。
          section在本质上组织性和结构性更强，而article代表的是自包含的容器。
<aside>	用于侧边栏
        应在main的内容之后，也可以嵌套在主要内容里面。
<footer>	位于页脚,用来放置版权声明、作者等信息
          只有当它最近的祖先是body时，它才是整个页面的页脚。如果一个footer包着它所在的区块（如一个article）的所有内容，它代表的是像附录、索引、版权页、许可协议这样的内容。
          只有页面级页脚有role="contentinfo"，切一个页面只能使用一次。


多个网页也需要规划，画出网站的结构草图。根据网站的组织结构创建子文件夹，为网站的图像、样式表（CSS文件）和JavaScript文件等创建单独的文件夹。
